import "io/io.xs0";
import "string.xs0";

import "xms/lib/message.xs0";
import "xms/lib/basic_info_parser.xs0";

const OfficialMinecraftServerInfomationParser = class(BasicInfomationParser) {
    // return a list like ["time", "who send this message", "level"]
    public const ParseMessagePrefix = function(StartFlag) {
        if (StartFlag.startswith("[") == false) {
            return(void); // 去掉不符合常规的Message
        };

        var time = StartFlag.substr(1, "xx:xx:xx".length());
        StartFlag = StartFlag.substr(12, StartFlag.length() - 13);
        var next = split(StartFlag, "/");
        if (next.size() != 2) {
            return(void);
        };
        return([time, next[0], next[1]]);
    };

    public var MainParser = function(input) {
        var Message = class(ServerMessage);
        Message.MessageType = ServerMessageType.UnknownMessage;
        var StartFlag = input.substr(0, input.find(": ", 0, input.length()));
        var RealMessage = input.substr(input.find(": ", 0, input.length()) + 2, input.length());
        var PrefixParseResult = this.ParseMessagePrefix(StartFlag);

        if (PrefixParseResult == void) {
            return(Message);
        };
        Message.MessageTime = PrefixParseResult[0];
        // parse message level
        switch (PrefixParseResult[2]) {
            case ("INFO") {
                Message.MessageType = ServerMessageType.NormalMessage;
                switch (PrefixParseResult[1]) {
                    case ("Server thread") {
                        // some events, can parse by header-strings
                        if (RealMessage.startswith("Starting minecraft server version ")) {
                            Message.MessageType = ServerMessageType.ServerVersion;
                            Message.MessageParam = [RealMessage.substr(34, RealMessage.length())];
                        } else if (RealMessage.startswith("Default game type: ")) {
                            Message.MessageType = ServerMessageType.GameType;
                            Message.MessageParam = [RealMessage.substr(19, RealMessage.length())];
                        } else if (RealMessage.startswith("Starting Minecraft server on ")) {
                            Message.MessageType = ServerMessageType.ServerAddress;
                            Message.MessageParam = split(RealMessage.substr(29, RealMessage.length()), ":");
                        } else if (RealMessage.startswith("Done (")) {
                            Message.MessageType = ServerMessageType.ServerStarted;
                            Message.MessageParam = [];
                        } else if (RealMessage.startswith("<")) {
                            if (RealMessage.find(">", 1, RealMessage.length()) == 0-1) {
                                Message.MessageType = ServerMessageType.UnknownMessage;
                                return(Message);
                            };
                            var playerName = RealMessage.substr(1, RealMessage.find(">", 1, RealMessage.length()));
                            var playerMessage = RealMessage.substr(RealMessage.find(">", 1, RealMessage.length()) + 3, RealMessage.length());
                            Message.MessageType = ServerMessageType.PlayerSendMessage;
                            Message.MessageParam = [playerName, playerMessage];
                        }
                        
                        /* 
                         * but some of them cannot parse by that way.
                         * but there are some texts can identify them
                         * we don't need to care about player's messages,
                         * they have been processed before.
                         */
                        
                        else if (RealMessage.find("joined the game", 0, RealMessage.length()) != 0-1) {
                            Message.MessageType = ServerMessageType.PlayerJoined;
                            Message.MessageParam = [RealMessage.substr(0, RealMessage.length() - 16)];
                        } else if (RealMessage.find("left the game", 0, RealMessage.length()) != 0-1) {
                            Message.MessageType = ServerMessageType.PlayerDisconnected;
                            Message.MessageParam = [RealMessage.substr(0, RealMessage.length() - 14)];
                        }
                        
                        /*
                         * process the normal log output
                         */
                        
                        else {
                            Message.MessageType = ServerMessageType.NormalMessage;
                            Message.MessageParam = [RealMessage];
                        };
                    }
                    default {
                        Message.MessageParam = [RealMessage];
                    }
                };
            }
            case ("WARN") {
                Message.MessageType = ServerMessageType.WarningMessage;
                Message.MessageParam = [RealMessage];
            }
            case ("ERROR") {
                Message.MessageType = ServerMessage.ErrorMessage;
                Message.MessageParam = [RealMessage];
            }
            default {
                Message.MessageParam = [RealMessage];
                return(Message);
            }
        };
        return(Message);
    };
};